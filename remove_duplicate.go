// Do not edit this file.
// Generate with: go run gen.go -output remove_duplicate.go

package tools
 
// RemoveDuplicateInt 删除slice中重复的元素
func RemoveDuplicateInt (a []int) []int {
	res := make([]int, 0)
TOP:
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(res); j++ {
			if a[i] == res[j] {
				continue TOP
			}
		}
		res = append(res, a[i])
	}
	return res
} 
// RemoveDuplicateInt8 删除slice中重复的元素
func RemoveDuplicateInt8 (a []int8) []int8 {
	res := make([]int8, 0)
TOP:
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(res); j++ {
			if a[i] == res[j] {
				continue TOP
			}
		}
		res = append(res, a[i])
	}
	return res
} 
// RemoveDuplicateInt16 删除slice中重复的元素
func RemoveDuplicateInt16 (a []int16) []int16 {
	res := make([]int16, 0)
TOP:
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(res); j++ {
			if a[i] == res[j] {
				continue TOP
			}
		}
		res = append(res, a[i])
	}
	return res
} 
// RemoveDuplicateInt32 删除slice中重复的元素
func RemoveDuplicateInt32 (a []int32) []int32 {
	res := make([]int32, 0)
TOP:
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(res); j++ {
			if a[i] == res[j] {
				continue TOP
			}
		}
		res = append(res, a[i])
	}
	return res
} 
// RemoveDuplicateInt64 删除slice中重复的元素
func RemoveDuplicateInt64 (a []int64) []int64 {
	res := make([]int64, 0)
TOP:
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(res); j++ {
			if a[i] == res[j] {
				continue TOP
			}
		}
		res = append(res, a[i])
	}
	return res
} 
// RemoveDuplicateUint 删除slice中重复的元素
func RemoveDuplicateUint (a []uint) []uint {
	res := make([]uint, 0)
TOP:
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(res); j++ {
			if a[i] == res[j] {
				continue TOP
			}
		}
		res = append(res, a[i])
	}
	return res
} 
// RemoveDuplicateUint8 删除slice中重复的元素
func RemoveDuplicateUint8 (a []uint8) []uint8 {
	res := make([]uint8, 0)
TOP:
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(res); j++ {
			if a[i] == res[j] {
				continue TOP
			}
		}
		res = append(res, a[i])
	}
	return res
} 
// RemoveDuplicateUint16 删除slice中重复的元素
func RemoveDuplicateUint16 (a []uint16) []uint16 {
	res := make([]uint16, 0)
TOP:
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(res); j++ {
			if a[i] == res[j] {
				continue TOP
			}
		}
		res = append(res, a[i])
	}
	return res
} 
// RemoveDuplicateUint32 删除slice中重复的元素
func RemoveDuplicateUint32 (a []uint32) []uint32 {
	res := make([]uint32, 0)
TOP:
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(res); j++ {
			if a[i] == res[j] {
				continue TOP
			}
		}
		res = append(res, a[i])
	}
	return res
} 
// RemoveDuplicateUint64 删除slice中重复的元素
func RemoveDuplicateUint64 (a []uint64) []uint64 {
	res := make([]uint64, 0)
TOP:
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(res); j++ {
			if a[i] == res[j] {
				continue TOP
			}
		}
		res = append(res, a[i])
	}
	return res
} 
// RemoveDuplicateFloat32 删除slice中重复的元素
func RemoveDuplicateFloat32 (a []float32) []float32 {
	res := make([]float32, 0)
TOP:
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(res); j++ {
			if a[i] == res[j] {
				continue TOP
			}
		}
		res = append(res, a[i])
	}
	return res
} 
// RemoveDuplicateFloat64 删除slice中重复的元素
func RemoveDuplicateFloat64 (a []float64) []float64 {
	res := make([]float64, 0)
TOP:
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(res); j++ {
			if a[i] == res[j] {
				continue TOP
			}
		}
		res = append(res, a[i])
	}
	return res
} 
// RemoveDuplicateString 删除slice中重复的元素
func RemoveDuplicateString (a []string) []string {
	res := make([]string, 0)
TOP:
	for i := 0; i < len(a); i++ {
		for j := 0; j < len(res); j++ {
			if a[i] == res[j] {
				continue TOP
			}
		}
		res = append(res, a[i])
	}
	return res
}
